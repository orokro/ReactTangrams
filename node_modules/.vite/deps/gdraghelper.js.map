{
  "version": 3,
  "sources": ["../../gdraghelper/DragHelper.js"],
  "sourcesContent": ["/*\n    DragHelper.js\n    -------------\n\n    Provides a class to help dragging things with the mouse, using top-level window events so dragging Out-of-Bounds over an element will continue to work.\n\n    Usage:\n    - Create a DragHelper object\n    - call dragStart on the object when you get a mouse down on the item you want drag support on\n    - pass in two callbacks, one to handle mouse moves while dragging, and one when drag operation is over (mouse up)\n    - both callbacks will get deltaX and deltaY as parameters.\n    - units are in pixels, relative to where the drag started (drag start is 0, 0)\n\n    This wil add a mouse mouse and mouse up event listener to the main window object.\n\n    You can call getCursorPos on this object at any point to get the current cursor pos in window coordinates.\n\n*/\nexport default class DragHelper {\n\n\n  /**\n   * Constructor for the DragHelper object\n   * \n   * @param {Object} options - OPTIONAL; object with default options for this drag helper, like { usePointerEvents, scaleMultiplier }\n   */\n  constructor(options) {\n\n    // define our default options\n    const defaults = {\n      usePointerEvents: false,\n      scaleMultiplier: 1,\n    };\n\n    // apply our optional options\n    options = (options===undefined) ? {} : options;\n    this.options = {\n      ...defaults,\n      ...options\n    };\n\n    // Save the global mouse position so we can easily reference it\n    this._mouseX = 0;\n    this._mouseY = 0;\n\n    // Save the start X/Y position of a mouse-drag so we can calculate deltaX/deltaY alter\n    this._startX = 0;\n    this._startY = 0;\n\n    // Storage for the call back functions\n    this._callBacks = [];\n\n    // The state of weather or not a current drag is in progress\n    this._isDragging = false;\n\n    // true if we're on the first-fire of the move function\n    this._firstMove = false;\n\n    // pick which move event to add for our movement inputs\n    // (pointermove vs mousemove)\n    const moveEventName = this.options.usePointerEvents ? 'pointermove' : 'mousemove';\n\n    // Set up an event handler so we always know the global mouseX and mouseY\n    window.addEventListener(moveEventName, (event) => {\n      this._mouseX = event.pageX;\n      this._mouseY = event.pageY;\n    });\n\n    // Set up an event handler for mousemove to our custom dragMove function\n    window.addEventListener(moveEventName, event=>this._onDragMove(event));\n\n    // Set up an event handler for mouseup/pointerup/touch to our custom dragMove\n    // note that we'll handle ALL of these, but only one will have effect because the first one\n    // that is handled will set this._isDragging to false\n    window.addEventListener('mouseup', event=>this._onDragEnd(event));\n    window.addEventListener('pointerup', event=>this._onDragEnd(event));\n    window.addEventListener('touchend', event=>this._onDragEnd(event));\n\n  }\n\n\n  /**\n   * Returns the last recorded mouse position in the window as an object like {x, y}\n   * @returns {Object} - basic 2d point object with X and Y\n   */\n  getCursorPos() {\n\n    return {\n      x: this._mouseX,\n      y: this._mouseY,\n    };\n  }\n\n\n  /**\n   * Updates scaleMultiplier on our instance\n   * \n   * @param {Number} scaleMultiplier - new value to multiply deltas by before calling callbacks\n   */\n  setScaleMultiplier(scaleMultiplier){\n    this.options.scaleMultiplier  = scaleMultiplier;\n  }\n\n\n  /**\n   * Sets up a drag operation with two callbacks for during the drag move & after\n   * \n   * @param {Function} callBackFunctionMove - call back function for when the mouse moves during a drag operation\n   * @param {Function} callBackFunctionEnd - call back function for when the mouse drag operation ends\n   * @param {Number} scaleMultiplier - OPTIONAL; - provide a new scale-modifier, since this might change from when we were constructed\n   * @returns {Number} the index of the latest call backs added to our array of callbacks *see not in function body\n   */\n  dragStart(callBackFunctionMove, callBackFunctionEnd, scaleMultiplier) {\n\n    /*\n      * This class originally assumed there could be multiple callbacks attached at once\n      but in practicality, parallel drag operations at once is basically rare / impossible.\n\n      Someday, should stop using arrays to store the callbacks.\n\n      So essentially, the return value of this method is useless.\n     */\n\n    // handle optional parameter\n    scaleMultiplier = (scaleMultiplier===undefined) ? this.options.scaleMultiplier : scaleMultiplier;\n    this.options.scaleMultiplier = scaleMultiplier;\n\n    // Save the initial position of the mouse when this is run, unless we're already dragging)\n    if (!this._isDragging) {\n      this._startX = this._mouseX;\n      this._startY = this._mouseY;\n    }\n\n    // Save the callback function\n    this._callBacks.push({\n      onMove: typeof callBackFunctionMove === 'undefined' ? null : callBackFunctionMove,\n      onEnd: typeof callBackFunctionEnd === 'undefined' ? null : callBackFunctionEnd,\n    });\n\n    // We are now dragging\n    this._isDragging = true;\n\n    // this will be set back false, if as soon as we get one move update\n    this._firstMove = true;\n\n    //return true since we were able to start dragging\n    return this._callBacks.length - 1;\n\n  } \n\n\n  /**\n   * Stops all dragging call backs & sets our drag mode to false.\n   * \n   * This replaces the old cancel call back which is deprecated.\n   */\n  dragStop(){\n\n    // if we're current not dragging, just BTFO\n    if(this._isDragging==false)\n      return;\n\n    // we can just call our private function, with no event object\n    // because this will fire the on end callbacks & clear everything.\n    this._onDragEnd();\n  }\n\n\n  /**\n   * Handles mouse move at a window level\n   * \n   * @param {Event} event - the JavaScript event object\n   * @returns {Boolean} false is no current drag operation\n   */\n  _onDragMove(event) {\n\n    // If we're not dragging, nothing to do here!\n    if (!this._isDragging) return false;\n\n    // Make sure the UI doesn't mess up thanks to HTML\n    event.preventDefault();\n\n    // if we're on the first move and we're using pointer-events instead of mouse events,\n    // we need to set the initial positions now, because they would be wrong previously\n    // (because pointer move wont run on iPad until pointer is also down)\n    if(this._firstMove==true && this.options.usePointerEvents==true){\n      this._startX = this._mouseX;\n      this._startY = this._mouseY;\n    }\n\n    // Calculate the delta X and Y\n    var deltaX = (this._startX - this._mouseX) * this.options.scaleMultiplier;\n    var deltaY = (this._startY - this._mouseY) * this.options.scaleMultiplier;\n\n    // Call the callback function with the delta data\n    if (this._callBacks.length > 0) {\n\n      for (var i = 0; i < this._callBacks.length; i++){\n\n        if (this._callBacks[i].onMove != null){\n\n          this._callBacks[i].onMove.call(null, deltaX, deltaY);\n        }\n      }// next i\n    }\n\n    // this will never be true again, until someone calls dragStart again\n    this._firstMove = false;\n  }\n\n\n  /**\n   * Handles when there is a mouse up on the window. If we're dragging, time to end the drag operation\n   * \n   * @param {Event} event - the JavaScript event object\n   */\n  _onDragEnd(event) {\n    \n    // if dragging is already done, gtfo\n    if(this._isDragging==false)\n      return;\n\n    // Calculate the delta X and Y\n    var deltaX = (this._startX - this._mouseX) * this.options.scaleMultiplier;\n    var deltaY = (this._startY - this._mouseY) * this.options.scaleMultiplier;\n\n    // Call the callback function with the delta data\n    if (this._callBacks.length > 0) {\n\n      for (var i = 0; i < this._callBacks.length; i++){\n\n        if (this._callBacks[i].onEnd != null){\n\n          this._callBacks[i].onEnd.call(null, deltaX, deltaY);\n        }\n      }// next i\n    }\n\n    // Disable dragging\n    this._isDragging = false;\n\n    // Clear the call back functions\n    this._callBacks = [];\n  }\n\n\n  /**\n   * Clears our assigned callbacks.\n   *\n   * NOTE: this function is basically deprecated because we dont really need to support an array of callbacks anymore.\n   *\n   * To do: remove this.\n   * @param {Number} id - index of callbacks to clear\n   */\n  cancelCallback(id) {\n    console.warn('cancelCallback is deprecated');\n    this._callBacks[id] = { onMove: null, onEnd: null };\n  }\n\n}\n"],
  "mappings": "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",
  "names": []
}
