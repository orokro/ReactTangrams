import "./chunk-G3PMV62Z.js";

// node_modules/gdraghelper/DragHelper.js
var DragHelper = class {
  /**
   * Constructor for the DragHelper object
   * 
   * @param {Object} options - OPTIONAL; object with default options for this drag helper, like { usePointerEvents, scaleMultiplier }
   */
  constructor(options) {
    const defaults = {
      usePointerEvents: false,
      scaleMultiplier: 1
    };
    options = options === void 0 ? {} : options;
    this.options = {
      ...defaults,
      ...options
    };
    this._mouseX = 0;
    this._mouseY = 0;
    this._startX = 0;
    this._startY = 0;
    this._callBacks = [];
    this._isDragging = false;
    this._firstMove = false;
    const moveEventName = this.options.usePointerEvents ? "pointermove" : "mousemove";
    window.addEventListener(moveEventName, (event) => {
      this._mouseX = event.pageX;
      this._mouseY = event.pageY;
    });
    window.addEventListener(moveEventName, (event) => this._onDragMove(event));
    window.addEventListener("mouseup", (event) => this._onDragEnd(event));
    window.addEventListener("pointerup", (event) => this._onDragEnd(event));
    window.addEventListener("touchend", (event) => this._onDragEnd(event));
  }
  /**
   * Returns the last recorded mouse position in the window as an object like {x, y}
   * @returns {Object} - basic 2d point object with X and Y
   */
  getCursorPos() {
    return {
      x: this._mouseX,
      y: this._mouseY
    };
  }
  /**
   * Updates scaleMultiplier on our instance
   * 
   * @param {Number} scaleMultiplier - new value to multiply deltas by before calling callbacks
   */
  setScaleMultiplier(scaleMultiplier) {
    this.options.scaleMultiplier = scaleMultiplier;
  }
  /**
   * Sets up a drag operation with two callbacks for during the drag move & after
   * 
   * @param {Function} callBackFunctionMove - call back function for when the mouse moves during a drag operation
   * @param {Function} callBackFunctionEnd - call back function for when the mouse drag operation ends
   * @param {Number} scaleMultiplier - OPTIONAL; - provide a new scale-modifier, since this might change from when we were constructed
   * @returns {Number} the index of the latest call backs added to our array of callbacks *see not in function body
   */
  dragStart(callBackFunctionMove, callBackFunctionEnd, scaleMultiplier) {
    scaleMultiplier = scaleMultiplier === void 0 ? this.options.scaleMultiplier : scaleMultiplier;
    this.options.scaleMultiplier = scaleMultiplier;
    if (!this._isDragging) {
      this._startX = this._mouseX;
      this._startY = this._mouseY;
    }
    this._callBacks.push({
      onMove: typeof callBackFunctionMove === "undefined" ? null : callBackFunctionMove,
      onEnd: typeof callBackFunctionEnd === "undefined" ? null : callBackFunctionEnd
    });
    this._isDragging = true;
    this._firstMove = true;
    return this._callBacks.length - 1;
  }
  /**
   * Stops all dragging call backs & sets our drag mode to false.
   * 
   * This replaces the old cancel call back which is deprecated.
   */
  dragStop() {
    if (this._isDragging == false)
      return;
    this._onDragEnd();
  }
  /**
   * Handles mouse move at a window level
   * 
   * @param {Event} event - the JavaScript event object
   * @returns {Boolean} false is no current drag operation
   */
  _onDragMove(event) {
    if (!this._isDragging) return false;
    event.preventDefault();
    if (this._firstMove == true && this.options.usePointerEvents == true) {
      this._startX = this._mouseX;
      this._startY = this._mouseY;
    }
    var deltaX = (this._startX - this._mouseX) * this.options.scaleMultiplier;
    var deltaY = (this._startY - this._mouseY) * this.options.scaleMultiplier;
    if (this._callBacks.length > 0) {
      for (var i = 0; i < this._callBacks.length; i++) {
        if (this._callBacks[i].onMove != null) {
          this._callBacks[i].onMove.call(null, deltaX, deltaY);
        }
      }
    }
    this._firstMove = false;
  }
  /**
   * Handles when there is a mouse up on the window. If we're dragging, time to end the drag operation
   * 
   * @param {Event} event - the JavaScript event object
   */
  _onDragEnd(event) {
    if (this._isDragging == false)
      return;
    var deltaX = (this._startX - this._mouseX) * this.options.scaleMultiplier;
    var deltaY = (this._startY - this._mouseY) * this.options.scaleMultiplier;
    if (this._callBacks.length > 0) {
      for (var i = 0; i < this._callBacks.length; i++) {
        if (this._callBacks[i].onEnd != null) {
          this._callBacks[i].onEnd.call(null, deltaX, deltaY);
        }
      }
    }
    this._isDragging = false;
    this._callBacks = [];
  }
  /**
   * Clears our assigned callbacks.
   *
   * NOTE: this function is basically deprecated because we dont really need to support an array of callbacks anymore.
   *
   * To do: remove this.
   * @param {Number} id - index of callbacks to clear
   */
  cancelCallback(id) {
    console.warn("cancelCallback is deprecated");
    this._callBacks[id] = { onMove: null, onEnd: null };
  }
};
export {
  DragHelper as default
};
//# sourceMappingURL=gdraghelper.js.map
